# ------------------------------------------------------
# 1) Nombre de la aplicación (para Eureka)
# ------------------------------------------------------
spring.application.name=species-service

# ------------------------------------------------------
# 2) Eureka Client: URL de tu Discovery Server en Railway
# ------------------------------------------------------
# En Railway debes haber creado en ?species-service ? Variables?:
#    KEY   = DISCOVERY_SERVER_URL
#    VALUE = https://discovery-server-production.up.railway.app
#
# Con esto, Spring Cloud Eureka buscará en:
#    https://${DISCOVERY_SERVER_URL}/eureka
#
eureka.client.service-url.defaultZone=${DISCOVERY_SERVER_URL}/eureka

# ------------------------------------------------------
# 3) Hibernate: crea/actualiza automáticamente tablas
# ------------------------------------------------------
spring.jpa.hibernate.ddl-auto=update

# ------------------------------------------------------
# 4) DATASOURCE: usar exactamente las variables que Railway inyecta
#    (tal como aparecen en tu captura de pantalla)
#    ? MYSQLHOST      = mysql.ailway.internal
#    ? MYSQLPORT      = 3306
#    ? MYSQLDATABASE  = railway
#    ? MYSQLUSER      = root
#    ? MYSQLPASSWORD  = GrCSjFlzViApjwCFReiXDEPjDuWYcggi
#
# Si alguna de esas variables no existiera (por ejemplo, al arrancar local),
# usamos caídas por defecto (localhost, puerto 3306, base ?capstone?, user ?root?, pwd ?admin1234?).
# ------------------------------------------------------
spring.datasource.url=jdbc:mysql://${MYSQLHOST:localhost}:${MYSQLPORT:3306}/${MYSQLDATABASE:capstone}?useSSL=false&serverTimezone=UTC
spring.datasource.username=${MYSQLUSER:root}
spring.datasource.password=${MYSQLPASSWORD:admin1234}
spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver

# ------------------------------------------------------
# 5) Configuración de instancia Eureka
# ------------------------------------------------------
# Le indicamos a Eureka que use la IP del contenedor (prefer-ip-address=true)
# y generamos un instance-id único para cada réplica.
#
eureka.instance.prefer-ip-address=true
eureka.instance.instance-id=${spring.application.name}:${vcap.application.instance_index:${random.value}}
eureka.instance.hostname=${HOSTNAME:${eureka.instance.ip-address}}

# ------------------------------------------------------
# 6) PUERTO DINÁMICO (Railway inyecta la variable PORT).
#    Si no existe PORT (ej. al probar local), caerá en 8081.
# ------------------------------------------------------
server.port=${PORT:8081}
