#############################################
# 1) Nombre del servicio para Eureka
#############################################
spring.application.name=species-service

#############################################
# 2) URL de Eureka (Discovery Server) en Railway
#############################################
# Dentro de Railway, discovery-server se resuelve por su nombre de servicio:
eureka.client.service-url.defaultZone=${DISCOVERY_SERVER_URL}/eureka

#############################################
# 3) Hibernate: crear/actualizar tablas automáticamente
#############################################
spring.jpa.hibernate.ddl-auto=update

#############################################
# 4) Configuración del DataSource usando variables de entorno de Railway
#############################################
spring.datasource.url=jdbc:mysql://${MYSQLHOST}:${MYSQLPORT}/${MYSQLDATABASE}?useSSL=false&serverTimezone=UTC
spring.datasource.username=${MYSQLUSER}
spring.datasource.password=${MYSQLPASSWORD}
spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver

#############################################
# 5) Parámetros de instancia Eureka
#############################################
# Preferir IP interna, y generar un instance-id único:
eureka.instance.prefer-ip-address=true
eureka.instance.instance-id=${spring.application.name}:${random.value}
eureka.instance.hostname=${HOSTNAME:${eureka.instance.ip-address}}

#############################################
# 6) Puerto de la aplicación
#############################################
# Railway inyecta la variable PORT; si no existe, usará 8081.
server.port=${PORT:8081}
